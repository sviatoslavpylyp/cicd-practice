name: push workflow

on:
  push

env:
  PYTHON_VERSION: '3.13'

jobs:
  install_requirements:
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, 'bump:')"

    steps:
      - name: pre actions/checkout
        uses: actions/checkout@v4

      - name: pre actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: check if cached requirements.txt exist
        id: cached_requirements
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-requirements-${{ hashFiles('./requirements.txt') }}

      - name: install requirements.txt
        if: steps.cached_requirements.outputs.cache-hit != 'true'
        run: pip install --no-cache-dir -r requirements.txt

      - name: cache requirements.txt, if it was updated
        if: steps.cached_requirements.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-requirements-${{ hashFiles('./requirements.txt') }}


  create-semantic-version:
    runs-on: ubuntu-latest
    name: "Bump version and create changelog with commitizen"
    needs: install_requirements

    outputs:
      semantic_versioning: ${{ steps.cz.outputs.version }}

    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: "${{ secrets.GH_TOKEN }}"

      - name: Create bump and changelog
        id: cz
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}

      - name: Print Version
        run: |
          echo "Bumped to version ${{ steps.cz.outputs.version }}"


  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    needs: create-semantic-version

    env:
      DOCKERFILE_NAME: 'Dockerfile'
      AWS_REGION: 'us-west-2'
      IMAGE_TAG: ${{ needs.create-semantic-version.outputs.semantic_versioning }}
      REPOSITORY: 'spylyp/py-app'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "Building Docker image..."
          docker build -f ${{ env.DOCKERFILE_NAME }} -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
          
          echo "Pushing Docker image..."
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
       
          

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#      - name: Push to Dockerhub
#        uses: docker/build-push-action@v6
#        with:
#          push: true
#          context: .
#          file: ${{ env.DOCKERFILE_NAME }}
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/py-app:${{ needs.create-semantic-version.outputs.semantic_versioning }}
#          platforms: linux/arm64
